name: Sync Submodules

on:
  repository_dispatch:
    types: [submodule-update]
  workflow_dispatch:
  schedule:
    # Optional: Run every hour to check for updates
    - cron: "0 * * * *"

jobs:
  sync-submodules:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout master repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          submodules: recursive

      - name: Update submodules with auto-detected branches
        run: |
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'

          # Update each submodule individually with branch detection
          git submodule foreach '
            echo "Processing submodule: $name"
            git fetch origin
            
            # Try to get the default branch from remote HEAD
            DEFAULT_BRANCH=$(git symbolic-ref refs/remotes/origin/HEAD 2>/dev/null | sed "s@^refs/remotes/origin/@@" || echo "")
            
            # If that fails, try to detect from available branches
            if [ -z "$DEFAULT_BRANCH" ]; then
              echo "Could not get default branch from HEAD, detecting..."
              if git show-ref --verify --quiet refs/remotes/origin/main; then
                DEFAULT_BRANCH="main"
              elif git show-ref --verify --quiet refs/remotes/origin/master; then
                DEFAULT_BRANCH="master"
              else
                echo "Error: Could not find main or master branch for $name"
                exit 1
              fi
            fi
            
            echo "Using branch: $DEFAULT_BRANCH for $name"
            git checkout $DEFAULT_BRANCH
            git pull origin $DEFAULT_BRANCH
          '

      - name: Check if there are changes
        id: verify-changed-files
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
          else
            echo "changed=false" >> $GITHUB_OUTPUT
          fi

      - name: Commit and push changes
        if: steps.verify-changed-files.outputs.changed == 'true'
        run: |
          git add .
          git commit -m "Auto-update submodules to latest master commits"
          git push origin master
